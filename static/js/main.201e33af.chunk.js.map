{"version":3,"sources":["Header/index.js","Main/index.js","Div/index.js","Form/Results/index.js","Form/DivButtons/index.js","Currencies/index.js","Form/index.js","Footer/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","className","Main","children","Div","actualDate","toLocaleDateString","undefined","month","weekday","day","year","hour","minute","second","Results","result","amount","currencyFrom","value","toFixed","currencyTo","DivButtons","hideRates","toggleHideRates","onClick","type","currencies","id","name","Form","useState","setAmount","setCurrencyFrom","setCurrencyTo","setResult","onSubmit","event","preventDefault","valueFrom","find","valueTo","calculateResult","onChange","target","required","map","currency","min","step","slice","defaultValue","Footer","App","setHideRates","Date","setActualDate","useEffect","setInterval","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAQeA,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,iCACI,oBAAIC,UAAU,SAAd,SAAwBD,OCEjBE,EANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACT,+BACKA,KCeMC,G,MAdH,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACR,qBAAKJ,UAAU,YAAf,SACKI,EAAWC,wBAAmBC,EAAW,CACtCC,MAAO,OACPC,QAAS,OACTC,IAAK,UACLC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,OAAQ,gBCHLC,G,MATC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEf,QACMA,GACE,oBAAGf,UAAU,gBAAb,UACKe,EAAOC,OADZ,IACqBD,EAAOE,aAD5B,OAC8CF,EAAOG,MAAMC,QAAQ,GADnE,IACwEJ,EAAOK,gBCY5EC,EAjBI,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,gBAE7B,OACI,sBAAKvB,UAAU,gBAAf,UACI,wBAAQA,UAAU,eAAlB,6BAEA,yBACIwB,QAASD,EACTE,KAAK,SACLzB,UAAU,eAHd,qBAKsB,IAAdsB,EAAqB,aAAU,SALvC,gBCmBGI,EAxBQ,CACf,CACEC,GAAI,MACJC,KAAM,MACNV,MAAO,GAET,CACES,GAAI,MACJC,KAAM,MACNV,MAAO,MAET,CACES,GAAI,MACJC,KAAM,MACNV,MAAO,KAET,CACES,GAAI,MACJC,KAAM,MACNV,MAAO,KCkFFW,EA/FF,SAAC,GAAoC,IAAlCN,EAAiC,EAAjCA,gBAAiBD,EAAgB,EAAhBA,UAE7B,EAA4BQ,mBAAS,IAArC,mBAAOd,EAAP,KAAee,EAAf,KACA,EAAwCD,mBAASJ,EAAW,GAAGE,MAA/D,mBAAOX,EAAP,KAAqBe,EAArB,KACA,EAAoCF,mBAASJ,EAAW,GAAGE,MAA3D,mBAAOR,EAAP,KAAmBa,EAAnB,KACA,EAA4BH,qBAA5B,mBAAOf,EAAP,KAAemB,EAAf,KAeA,OACI,mCACI,uBAAMlC,UAAU,OAAOmC,SAbV,SAACC,GAClBA,EAAMC,iBAGN,IAAMC,EAAYZ,EAAWa,MAAK,qBAAGX,OAAoBX,KACnDuB,EAAUd,EAAWa,MAAK,qBAAGX,OAAoBR,KACjDL,EARc,SAACC,EAAQsB,EAAWE,GAApB,OAAiCxB,GAAUsB,GAAaE,EAQ7DC,CAAgBzB,EAAQsB,EAAUpB,MAAOsB,EAAQtB,OAChEgB,EAAU,CAAElB,OAAQA,EAAQC,aAAcA,EAAcC,MAAOH,EAAQK,WAAYA,IACnFW,EAAU,KAKN,UACI,2BAAU/B,UAAU,iBAApB,UACI,yEAEQ,wBACAkB,MAAOD,EACPyB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBX,EAAgBW,EAAOzB,QACjDU,KAAK,eACL5B,UAAU,sCACV4C,UAAQ,EALR,SAOClB,EAAWmB,KAAI,SAAAC,GAAQ,OACpB,iCACKA,EAASnB,IADDmB,EAASnB,YAMlC,uEAEQ,wBACAT,MAAOE,EACPsB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBV,EAAcU,EAAOzB,QAC/CU,KAAK,aACL5B,UAAU,sCACV4C,UAAQ,EALR,SAOClB,EAAWmB,KAAI,SAAAC,GAAQ,OACpB,iCACKA,EAASlB,MADDkB,EAASnB,YAMlC,sDAEA,uBACQT,MAAOF,EACP0B,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBZ,EAAUY,EAAOzB,QAC3CO,KAAK,SACLzB,UAAU,cACV+C,IAAI,OACJH,UAAQ,EACRI,KAAK,eAIjB,cAAC,EAAD,CAAY1B,UAAWA,EAAWC,gBAAiBA,IACnD,cAAC,EAAD,CACIR,OAAQA,EACRC,OAAQA,IACZ,2BAAUhB,UAAS,0BAAkC,IAAdsB,EAAqB,yBAA2B,IAAvF,UACI,iDACCI,EAAWuB,MAAM,GAAGJ,KAAI,SAAAC,GAAQ,OAC7B,kCACKA,EAASlB,KACV,uBACIc,SAAU,SAACN,GAAD,OAAWU,EAAS5B,MAAQkB,EAAMO,OAAOzB,OAEnDO,KAAK,SACLzB,UAAU,cACV+C,IAAI,OACJC,KAAK,OACLE,aAAcJ,EAAS5B,OALlB4B,EAASnB,mBCjF/BwB,G,MAJA,kBACX,wBAAQnD,UAAU,SAAlB,gDCyCWoD,MArCf,WAEE,MAAkCtB,oBAAS,GAA3C,mBAAOR,EAAP,KAAkB+B,EAAlB,KAMA,EAAoCvB,mBAAS,IAAIwB,MAAjD,mBAAOlD,EAAP,KAAmBmD,EAAnB,KAaA,OAXAC,qBAAU,WAMR,OAJAC,aAAY,WACVF,EAAc,IAAID,QACjB,KAEI,WACLI,cAAcH,MAEf,IAGD,qCACE,cAAC,EAAD,CAAQxD,MAAM,sBACd,eAAC,EAAD,WACE,cAAC,EAAD,CAAKK,WAAYA,IACjB,cAAC,EAAD,CACEkB,UAAWA,EACXC,gBAxBgB,WACtB8B,GAAa,SAAA/B,GAAS,OAAKA,WA2BzB,cAAC,EAAD,QC3BSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.201e33af.chunk.js","sourcesContent":["import \"./style.css\";\n\nconst Header = ({ title }) => (\n    <header>\n        <h1 className=\"header\">{title}</h1>\n    </header>\n)\n\nexport default Header;","const Main = ({ children }) => (\n    <main>\n        {children}\n    </main>\n);\n\nexport default Main;","\nimport \"./style.css\";\n\nconst Div = ({ actualDate }) => (\n    <div className=\"main__div\">\n        {actualDate.toLocaleDateString(undefined, {\n            month: \"long\",\n            weekday: \"long\",\n            day: \"numeric\",\n            year: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\",\n            second: \"numeric\"\n        })}\n    </div>\n);\n\nexport default Div;","const Results = ({ result }) => {\n          \n    return (\n        !!result && (\n            <p className=\"form__results\">\n                {result.amount} {result.currencyFrom} to {result.value.toFixed(2)} {result.currencyTo}</p>\n        )\n    );\n}\nexport default Results;","const DivButtons = ({ hideRates, toggleHideRates }) => {\n\n    return (\n        <div className=\"form__display\">\n            <button className=\"form__button\">Przelicz waluty</button>\n\n            <button\n                onClick={toggleHideRates}\n                type=\"button\"\n                className=\"form__button\"\n            >\n                {`${hideRates === true ? \"Pokaż\" : \"Ukryj\"}`} Kursy\n            </button>\n        </div>\n    );\n};\n\nexport default DivButtons;","\n    const currencies = [\n        {\n          id: \"PLN\",\n          name: \"PLN\",\n          value: 1,\n        },\n        {\n          id: \"EUR\",\n          name: \"EUR\",\n          value: 4.45,\n        },\n        {\n          id: \"USD\",\n          name: \"USD\",\n          value: 4.2,\n        },\n        {\n          id: \"RUB\",\n          name: \"RUB\",\n          value: 0.2,\n        },\n      ];\n\n\nexport default currencies;","import React, { useState } from 'react';\nimport \"./style.css\";\nimport Results from \"./Results\";\nimport DivButtons from \"./DivButtons\";\nimport currencies from \"../Currencies\";\n\n\nconst Form = ({ toggleHideRates, hideRates }) => {\n\n    const [amount, setAmount] = useState(\"\");\n    const [currencyFrom, setCurrencyFrom] = useState(currencies[0].name);\n    const [currencyTo, setCurrencyTo] = useState(currencies[1].name);\n    const [result, setResult] = useState();\n\n    const calculateResult = (amount, valueFrom, valueTo) => +amount * +valueFrom / +valueTo;\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n\n\n        const valueFrom = currencies.find(({ name }) => name === currencyFrom);\n        const valueTo = currencies.find(({ name }) => name === currencyTo);\n        const result = calculateResult(amount, valueFrom.value, valueTo.value);\n        setResult({ amount: amount, currencyFrom: currencyFrom, value: result, currencyTo: currencyTo });\n        setAmount(\"\");\n    };\n\n    return (\n        <>\n            <form className=\"form\" onSubmit={onFormSubmit}>\n                <fieldset className=\"form__fieldset\">\n                    < label >\n                        Wybierz walutę do przeliczenia:\n                            <select\n                            value={currencyFrom}\n                            onChange={({ target }) => setCurrencyFrom(target.value)}\n                            name=\"currencyFrom\"\n                            className=\"form__field form__field--background\"\n                            required\n                        >\n                            {currencies.map(currency => (\n                                <option key={currency.id}>\n                                    {currency.id}\n                                </option>\n                            ))}\n                        </select>\n                    </label >\n                    < label >\n                        Wybierz walutę docelową:\n                            <select\n                            value={currencyTo}\n                            onChange={({ target }) => setCurrencyTo(target.value)}\n                            name=\"currencyTo\"\n                            className=\"form__field form__field--background\"\n                            required\n                        >\n                            {currencies.map(currency => (\n                                <option key={currency.id}>\n                                    {currency.name}\n                                </option>\n                            ))}\n                        </select>\n                    </label >\n                    <label>\n                        Wpisz kwotę:\n                    <input\n                            value={amount}\n                            onChange={({ target }) => setAmount(target.value)}\n                            type=\"number\"\n                            className=\"form__field\"\n                            min=\"0.01\"\n                            required\n                            step=\"0.01\"\n                        />\n                    </label>\n                </fieldset>\n                <DivButtons hideRates={hideRates} toggleHideRates={toggleHideRates} />\n                <Results\n                    result={result}\n                    amount={amount} />\n                <fieldset className={`form__fieldset ${hideRates === true ? \"form__currency--hidden\" : \"\"}`}>\n                    <legend>Kursy walut</legend>\n                    {currencies.slice(1).map(currency =>\n                        <label>\n                            {currency.name}\n                            <input\n                                onChange={(event) => currency.value = event.target.value}\n                                key={currency.id}\n                                type=\"number\"\n                                className=\"form__field\"\n                                min=\"0.01\"\n                                step=\"0.01\"\n                                defaultValue={currency.value}\n                            />\n                        </label>\n                    )}\n                </fieldset>\n            </form>\n        </>\n    );\n};\n\nexport default Form;","import \"./style.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">Designed by Wojciech Bylica Arts</footer>\n);\n\nexport default Footer;","import React, { useEffect, useState } from 'react';\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Div from \"./Div\";\nimport Form from \"./Form\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n\n  const [hideRates, setHideRates] = useState(true);\n\n  const toggleHideRates = () => {\n    setHideRates(hideRates => !hideRates);\n  };\n\n  const [actualDate, setActualDate] = useState(new Date())\n\n  useEffect(() => {\n\n    setInterval(() => {\n      setActualDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(setActualDate)\n    };\n  }, [])\n\n  return (\n    <>\n      <Header title=\"Przelicznik walut\" />\n      <Main>\n        <Div actualDate={actualDate} />\n        <Form\n          hideRates={hideRates}\n          toggleHideRates={toggleHideRates}\n        >\n        </Form>\n      </Main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}