{"version":3,"sources":["Header/index.js","Footer/index.js","Main/index.js","Form/Results/index.js","Fieldset/index.js","Form/index.js","DivButtons/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","className","Footer","Main","children","Results","result","amount","currencyFrom","value","toFixed","currencyTo","Fieldset","legend","Form","currencies","divButtons","hideRates","setNewCurrencyValue","toggleCurrencyValue","useState","setAmount","setCurrencyFrom","setCurrencyTo","setResult","onSubmit","event","preventDefault","valueFrom","find","name","valueTo","calculateResult","onChange","target","required","map","currency","id","type","min","step","slice","DivButtons","toggleHideRates","onClick","App","setCurrencies","newCurrencyValue","setHideRates","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b2f88f2.chunk.js","sourcesContent":["import \"./style.css\";\n\nconst Header = ({ title }) => (\n    <header>\n        <h1 className=\"header\">{title}</h1>\n    </header>\n)\n\nexport default Header;","import \"./style.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">Designed by Wojciech Bylica Arts</footer>\n);\n\nexport default Footer;","const Main = ({ children }) => (\n    <main>\n        {children}\n    </main>\n);\n\nexport default Main;","const Results = ({ result }) => (\n     !!result && (\n        <p className=\"form__results\">\n            {result.amount} {result.currencyFrom} to {result.value.toFixed(2)} {result.currencyTo}</p>\n    )\n);\n\nexport default Results;","const Fieldset = ({children, legend}) => {\nreturn (\n    <fieldset className=\"form__fieldset\">\n        <legend>{legend}</legend>\n        {children}\n    </fieldset>\n)\n};\n\n\n\nexport default Fieldset;","import React, { useState } from 'react';\nimport \"./style.css\";\nimport Results from \"./Results\";\nimport Fieldset from \"../Fieldset\";\n\n\nconst Form = ({ currencies, divButtons, hideRates, setNewCurrencyValue, toggleCurrencyValue }) => {\n\n    const [amount, setAmount] = useState(\"\");\n    const [currencyFrom, setCurrencyFrom] = useState(\"PLN\");\n    const [currencyTo, setCurrencyTo] = useState(\"EUR\");\n    const [result, setResult] = useState();\n\n    const calculateResult = (amount, valueFrom, valueTo) => +amount * +valueFrom / +valueTo;\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n\n\n        const valueFrom = currencies.find(({ name }) => name === currencyFrom);\n        const valueTo = currencies.find(({ name }) => name === currencyTo);\n        const result = calculateResult(amount, valueFrom.value, valueTo.value);\n        setResult({ amount: amount, currencyFrom: currencyFrom, value: result, currencyTo: currencyTo });\n        setAmount(\"\");\n    };\n\n    return (\n        <>\n            <form className=\"form\" onSubmit={onFormSubmit}>\n                <Fieldset>\n                    <>\n                        < label >\n                            \"Wybierz walutę do przeliczenia:\"\n                            <select\n                                value={currencyFrom}\n                                onChange={({ target }) => setCurrencyFrom(target.value)}\n                                name=\"currencyFrom\"\n                                className=\"form__field form__field--background\"\n                                required\n                            >\n                                {currencies.map(currency => (\n                                    <option key={currency.id}>\n                                        {currency.name}\n                                    </option>\n                                ))}\n                            </select>\n                        </label >\n                        < label >\n                            \"Wybierz walutę do przeliczenia:\"\n                        <select\n                                value={currencyTo}\n                                onChange={({ target }) => setCurrencyTo(target.value)}\n                                name=\"currencyTo\"\n                                className=\"form__field form__field--background\"\n                                required\n                            >\n                                {currencies.map(currency => (\n                                    <option key={currency.id}>\n                                        {currency.name}\n                                    </option>\n                                ))}\n                            </select>\n                        </label >\n                    </>\n                    <label>Wpisz kwotę\n                    <input\n                            value={amount}\n                            onChange={({ target }) => setAmount(target.value)}\n                            type=\"number\"\n                            className=\"form__field\"\n                            min=\"0.01\"\n                            required\n                            step=\"0.01\"\n                        />\n                    </label>\n                </Fieldset>\n                {divButtons}\n                <Results\n                    result={result}\n                    amount={amount} />\n                <fieldset  className={`form__fieldset ${hideRates === true ? \"form__currency--hidden\" : \"\"}`}>\n                                    <legend>Kursy walut</legend>\n                    {currencies.slice(1).map(currency =>\n                        <label>\n                            {currency.name}\n                            <input\n                                onChange={(event) => {\n                                    setNewCurrencyValue(event.target.value)\n                                    toggleCurrencyValue(currency.id)\n                                }}\n                                key={currency.id}\n                                type=\"number\"\n                                className=\"form__field\"\n                                min=\"0.01\"\n                                step=\"0.01\"\n                                value={currency.value}\n                            // readOnly={true}\n                            />\n                        </label>\n                    )}\n                </fieldset>\n            </form>\n\n        </>\n    );\n};\n\nexport default Form;","const DivButtons = ({ hideRates, toggleHideRates }) => {\n\n    return (\n        <div className=\"form__display\">\n            <p><button className=\"form__button\">Przelicz waluty</button></p>\n            <p>\n                <button\n                    onClick={toggleHideRates}\n                    type=\"button\"\n                    className=\"form__button\"\n                >\n                    {`${hideRates === true ? \"Pokaż\" : \"Ukryj\"}`} Kursy\n                </button>\n            </p>\n        </div>\n    );\n};\n\nexport default DivButtons;","import React, { useState } from 'react';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Main from \"./Main\";\nimport Form from \"./Form\";\nimport DivButtons from \"./DivButtons\";\n// import FormShowOrSetCurrencies from \"./FormShowOrSetCurrencies\";\n\n\nfunction App() {\n  const [currencies, setCurrencies] = useState([\n    {\n      id: \"PLN\",\n      name: \"PLN\",\n      value: 1,\n    },\n    {\n      id: \"EUR\",\n      name: \"EUR\",\n      value: 4.45,\n    },\n    {\n      id: \"USD\",\n      name: \"USD\",\n      value: 4.2,\n    },\n    {\n      id: \"RUB\",\n      name: \"RUB\",\n      value: 0.2,\n    },\n  ]);\n\n  const [newCurrencyValue, setNewCurrencyValue] = useState();\n\n  const toggleCurrencyValue = (id) => {\n    setCurrencies(currencies => currencies.map(currency => {\n      if (currency.id === id) {\n        return { ...currency, value: newCurrencyValue };\n      }\n\n      return currency;\n    }));\n  };\n\n  const [hideRates, setHideRates] = useState(true);\n\n  const toggleHideRates = () => {\n    setHideRates(hideRates => !hideRates);\n  };\n\n\n  return (\n    <>\n      <Header title=\"Przelicznik walut\" />\n      <Main>\n        <Form\n          setNewCurrencyValue={setNewCurrencyValue}\n          toggleCurrencyValue={toggleCurrencyValue}\n          hideRates={hideRates}\n          toggleHideRates={toggleHideRates}\n          currencies={currencies}\n          divButtons={<DivButtons hideRates={hideRates} toggleHideRates={toggleHideRates} />}\n        >\n        </Form>\n        {/* <FormShowOrSetCurrencies\n          setNewCurrencyValue={setNewCurrencyValue}\n          toggleCurrencyValue={toggleCurrencyValue}\n          currencies={currencies}\n          hideRates={hideRates}\n          toggleHideRates={toggleHideRates}\n        >\n        </FormShowOrSetCurrencies> */}\n\n      </Main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}